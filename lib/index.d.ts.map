{"mappings":"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","sources":["src/src/types/index.ts","src/src/utils/index.ts","src/src/db/interfaces/index.ts","src/src/hnsw.ts","src/src/proto/index.ts","src/src/db/common/index.ts","src/src/db/hollowdb.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,"import { ContractState, SetSDK } from \"hollowdb\";\nimport { HNSW } from \"./hnsw\";\nimport { HollowMemory } from \"./db/hollowdb\";\nimport type { JWKInterface, Warp } from \"warp-contracts\";\nimport { ArweaveSigner } from \"warp-contracts-plugin-deploy\";\n\nexport default class HollowDBVector<M = any> extends HNSW<M> {\n  /** HollowDB SDK instance as passed in the `constructor`. */\n  sdk: SetSDK<string>;\n\n  /**\n   * A VectorDB over HollowDB using HNSW index.\n   *\n   * @param hollowdb a hollowdb instance with `set` and `setMany` operations, where values are `string` typed.\n   * - Vectors are encoded & decoded with protobuffers, and the base64 of encodings are stored in HollowDB\n   * - Metadatas are stored as JSON-stringified values.\n   *\n   * @param options Optional HNSW parameters:\n   *\n   * - `m`:  **Number of established connections.**\n   * With higher dimension size, this should also be larger.\n   * Defaults to 5.\n   *\n   * - `efConstruction`: **Size of the dynamic candidate list.**\n   * Affects build times, for instance: 400 is slow but powerful, 40 is\n   * fast but not that performant.\n   * Defaults to 128.\n   *\n   * - `efSearch`: **Factor for quality of search.** Defaults to 20.\n   *\n   * @template M type of the metadata\n   */\n  constructor(\n    hollowdb: SetSDK<string>,\n    options?: {\n      m?: number;\n      efConstruction?: number;\n      efSearch?: number;\n    },\n  ) {\n    const m = options?.m || 5;\n    const ef_construction = options?.efConstruction || 128;\n    const ef_search = options?.efSearch || 20;\n\n    super(new HollowMemory<M>(hollowdb), m, ef_construction, ef_search);\n\n    this.sdk = hollowdb;\n  }\n\n  /** Deploy a new HollowDB Vector contract,\n   * which is a HollowDB contract with `set` and `setMany` functions in particular.\n   *\n   * @param wallet your Arweave wallet\n   * @param warp a Warp instance on mainnet\n   * @returns deployed contract transaction id and source transaction id\n   */\n  static async deploy(wallet: JWKInterface, warp: Warp): Promise<{ contractTxId: string; srcTxId: string }> {\n    // source transaction id, for the contract to be deployed\n    const srcTxId = \"lSRrPRiiMYeJsGgT9BdV9OTZTw3hZw_UkGVpEXjD5sY\";\n\n    // our source txid is on mainnet, so we must make sure of that\n    if (warp.environment !== \"mainnet\") {\n      throw new Error(\"Warp must be connected to mainnet.\");\n    }\n\n    // initailly the wallet is whitelisted on everything, and all\n    // whitelists are required for the contract\n    const addr = await warp.arweave.wallets.jwkToAddress(wallet);\n    const initialState: ContractState = {\n      version: \"hollowdb-vector@^0.1.0\",\n      owner: addr,\n      verificationKeys: { auth: null },\n      isProofRequired: { auth: false },\n      canEvolve: true,\n      whitelists: {\n        put: { [addr]: true },\n        update: { [addr]: true },\n        set: { [addr]: true },\n      },\n      isWhitelistRequired: { put: true, update: true, set: true },\n    };\n\n    const { srcTxId: deploymentSrcTxId, contractTxId } = await warp.deployFromSourceTx({\n      wallet: new ArweaveSigner(wallet),\n      initState: JSON.stringify(initialState),\n      srcTxId: srcTxId,\n      evaluationManifest: {\n        evaluationOptions: {\n          allowBigInt: true,\n          useKVStorage: true,\n        },\n      },\n    });\n\n    // impossible case, but still we should check for it\n    if (deploymentSrcTxId !== srcTxId) {\n      console.error(\"Deployed srcTxId is different than the given source!\");\n      console.error({ expected: srcTxId, received: deploymentSrcTxId });\n    }\n\n    return { contractTxId, srcTxId };\n  }\n}\n"],"names":[],"version":3,"file":"index.d.ts.map"}